
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module project(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,
	output wire [3:0] cnt
);

reg clk = 0; 
always @(posedge CLOCK2_50) clk = ~clk;  // clk is 25MHz
assign VGA_CLK = clk;

wire [9:0] sx, sy; 
// Instantiate VGA timer module
    vga_timer vga_timer_inst (
        .clk(clk),
        .rst(1'b0),
        .sx(sx),
        .sy(sy),
        .hsync(VGA_HS),
        .vsync(VGA_VS),
        .de(VGA_BLANK_N)
    );
wire btnR;
wire btnL;
wire btnShoot;

debounce deb1(.clk(clk),.button(KEY[0]),.button_press(btnR));
debounce deb2(.clk(clk),.button(KEY[1]),.button_press(btnL));
debounce deb3(.clk(clk),.button(KEY[3]),.button_press(btnShoot));

wire [1:0] enlife0,enlife1,enlife2,enlife3,enlife4,enlife5,enlife6,enlife7,enlife8,enlife9;
wire [1:0] enlife10,enlife11,enlife12,enlife13,enlife14,enlife15;
wire [3:0] ss_front_temp_wire;
wire [7:0] score_temp_wire;

gameLogic gam(
	//INPUTS
	.clk(clk),
	.reset(1'b0),
	.clk_reset(1'b0),
	.btnR(btnR),
	.btnL(btnL),
	.btnFire(btnShoot),
	.SWmode(SW[9]),
	//OUTPUTS
	.e_life0(enlife0),
	.e_life1(enlife1),
	.e_life2(enlife2),
	.e_life3(enlife3),
	.e_life4(enlife4),
	.e_life5(enlife5),
	.e_life6(enlife6),
	.e_life7(enlife7),
	.e_life8(enlife8),
	.e_life9(enlife9),
	.e_life10(enlife10),
	.e_life11(enlife11),
	.e_life12(enlife12),
	.e_life13(enlife13),
	.e_life14(enlife14),
	.e_life15(enlife15),
	
	.scoreOut(score_temp_wire),
	.ss_frontOut(ss_front_temp_wire)
);


    // Instantiate background dashed lines module
    background bg_inst (
		  //INPUTS
        .clk(clk),
        .x(sx),
        .y(sy),
        .ss_front(ss_front_temp_wire),  // Gun orientation set to 0
        .gunMode(SW[9]),        // Shooting mode set to 0 (90-degree mode)
		  .enType0(enlife0),
		  .enType1(enlife1),
		  .enType2(enlife2),
		  .enType3(enlife3),
		  .enType4(enlife4),
		  .enType5(enlife5),
		  .enType6(enlife6),
		  .enType7(enlife7),
		  .enType8(enlife8),
		  .enType9(enlife9),
		  .enType10(enlife10),
		  .enType11(enlife11),
		  .enType12(enlife12),
		  .enType13(enlife13),
		  .enType14(enlife14),
		  .enType15(enlife15),

		  
		  //OUTPUTS
        .red(VGA_R),
        .green(VGA_G),
        .blue(VGA_B)
    );


/*
reg [3:0] count = 4'b0000;
reg btn_prev;

always @(posedge btn) begin

         count <= count + 1'b1; // Increment count

end
assign cnt = count;*/

//=======================================================
//  Structural coding
//=======================================================



endmodule
